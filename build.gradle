import java.util.stream.Collectors

plugins {
    id "com.diffplug.spotless" version "5.17.1"
    id "com.avast.gradle.docker-compose" version "0.14.9"
    id "org.sonarqube" version "3.3"
}

apply plugin: "java"
apply plugin: "application"
//apply plugin: "idea"

ext {
    dependencyVersions = [
        jackson_version: "2.13.0",
        aws_sdk_version: "1.12.101",
        aws_lambda_core_version: "1.2.1",
        aws_lambda_events_version: "3.10.0",
        nimbusds_oauth_version: "9.19",
        nimbusds_jwt_version: "9.15.1",
        junit: "5.8.1",
        jackson_version: "2.13.0",
        glassfish_version: "3.0.3",
    ]

    terraformEnvironment = project.properties["terraformEnvironment"] ?: "localstack"

    awsCredentialsEnvironment = terraformEnvironment == "localstack" ? [
        AWS_ACCESS_KEY_ID: "mock-access-key",
        AWS_SECRET_ACCESS_KEY: "mock-secret-key",
    ] : [:]
}

subprojects {
    configurations {
        bouncycastle
        dynamodb
        glassfish
        govuk_notify
        hamcrest
        jackson
        lambda
        lambda_tests
        lettuce
        logging_runtime
        nimbus
        s3
        sns
        sqs
        ssm
        tests
        test_runtime
    }

    dependencies {
        bouncycastle "org.bouncycastle:bcpkix-jdk15on:1.69"

        dynamodb "com.amazonaws:aws-java-sdk-dynamodb:${dependencyVersions.aws_sdk_version}"

        glassfish "org.glassfish.jersey.core:jersey-client:${dependencyVersions.glassfish_version}",
                "org.glassfish.jersey.inject:jersey-hk2:${dependencyVersions.glassfish_version}",
                "org.glassfish.jersey.media:jersey-media-json-jackson:${dependencyVersions.glassfish_version}",
                "jakarta.activation:jakarta.activation-api:2.0.1"

        govuk_notify "uk.gov.service.notify:notifications-java-client:3.17.2-RELEASE"

        hamcrest "org.hamcrest:hamcrest:2.2"

        lambda "com.amazonaws:aws-lambda-java-core:${dependencyVersions.aws_lambda_core_version}",
                "com.amazonaws:aws-lambda-java-events:${dependencyVersions.aws_lambda_events_version}",
                "com.amazonaws:aws-lambda-java-log4j2:1.2.0"

        lambda_tests "com.amazonaws:aws-lambda-java-tests:1.1.0"

        lettuce "org.apache.commons:commons-pool2:2.11.1",
                "io.lettuce:lettuce-core:6.1.5.RELEASE"

        logging_runtime "com.amazonaws:aws-lambda-java-log4j2:1.2.0"

        jackson "com.fasterxml.jackson.core:jackson-core:${dependencyVersions.jackson_version}",
                "com.fasterxml.jackson.core:jackson-databind:${dependencyVersions.jackson_version}",
                "com.fasterxml.jackson.core:jackson-annotations:${dependencyVersions.jackson_version}",
                "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${dependencyVersions.jackson_version}",
                "org.hibernate.validator:hibernate-validator:7.0.1.Final",
                "org.glassfish:jakarta.el:4.0.2"

        nimbus "com.nimbusds:oauth2-oidc-sdk:${dependencyVersions.nimbusds_oauth_version}",
                "com.nimbusds:nimbus-jose-jwt:${dependencyVersions.nimbusds_jwt_version}"

        sns "com.amazonaws:aws-java-sdk-sns:${dependencyVersions.aws_sdk_version}"

        sqs "software.amazon.awssdk:sqs:2.17.73"

        ssm "com.amazonaws:aws-java-sdk-ssm:${dependencyVersions.aws_sdk_version}"

        s3 "com.amazonaws:aws-java-sdk-s3:${dependencyVersions.aws_sdk_version}"

        tests "org.junit.jupiter:junit-jupiter-api:${dependencyVersions.junit}",
                "org.junit.jupiter:junit-jupiter-params:${dependencyVersions.junit}",
                "org.mockito:mockito-core:4.0.0",
                "org.awaitility:awaitility:4.1.1",
                configurations.hamcrest

        test_runtime "org.junit.jupiter:junit-jupiter-engine:${dependencyVersions.junit}"
    }
}

spotless {
    java {
        target "**/*.java"
        googleJavaFormat("1.12.0").aosp()
        importOrder "", "javax", "java", "\\#"
    }

    groovyGradle {
        target "**/*.gradle"
        greclipse().configFile("tools/spotless-gradle.properties")
    }
}

dockerCompose {
    buildBeforeUp = true
    forceRecreate = false

    startedServices = [
        'aws',
        'dynamodb',
        'redis'
    ]
    def logDir = new File(project.buildDir, "logs")
    if (!logDir.exists()) {
        println("creating logs folder...")
        logDir.mkdir()
    }
    captureContainersOutput = false
    captureContainersOutputToFile = new File('logs', 'docker-compose-gradle.log')
    projectName = rootProject.rootDir.name
}

//compileJava.dependsOn "spotlessApply"

//clean.dependsOn "composeDown"

sonarqube {
    properties {
        property "sonar.projectKey", "alphagov_di-authentication-api"
        property "sonar.organization", "alphagov"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

